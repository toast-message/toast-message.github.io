(()=>{const createElement=(tag,props={})=>Object.assign(document.createElement(tag),props);setTimeout((()=>{document.body.appendChild(createElement("toast-message"))}),1e3),window.showToastMessage=(message,options)=>document.querySelector("toast-message").show(message,options),customElements.define("toast-message",class extends HTMLElement{constructor(){super().attachShadow({mode:"open"}).append(createElement("style",{textContent:":host{display:flex;flex-direction:column;gap:6px;z-index:999;position:fixed;bottom:6px;right:6px}div{background:var(--toast-message-background,#333);color:var(--toast-message-color,white);box-shadow:0 6px 6px rgba(0, 0, 0, .5);padding:6px 12px;border-radius:4px;opacity:0;transform:translateY(50%);transition:transform 0.25s, opacity 0.25s}.show{opacity:1;transform:translateY(0)}"}))}connectedCallback(){this.listen({type:this.localName,func:evt=>this.show(evt.detail.message,evt.detail.options||{})})}listen({type:type,func:func,scope:scope=document,options:options={}}){scope.addEventListener(type,func);let remove=()=>scope.removeEventListener(type,func,options);return this.listeners=this.listeners||[],this.listeners.push(remove),remove}disconnectedCallback(){this.listeners?.forEach((remove=>remove()))}show(textContent,{delay:delay=this.getAttribute("delay")||5e3}={},toast=createElement("div",{part:"toast",textContent:textContent})){this.shadowRoot.append(toast),requestAnimationFrame((()=>toast.classList.add("show"))),setTimeout((()=>{toast.classList.remove("show"),this.listen({scope:toast,type:"transitionend",func:()=>toast.remove(),options:{once:!0}})}),delay)}})})();